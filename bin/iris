#!/usr/bin/env node
const path = require('path');
const postcss = require('postcss');
const fs = require('fs');
const varibilify = require('../lib/varibilify.js');
const options = process.argv.reduce(
  function(prev, item, i, arr) {
    switch(true) {
      case item === '--input-path':
      case item === '-i':
        prev.inputPath = arr[i + 1];
        break;
      case item === '--output-path':
      case item === '-o':
        prev.outputPath = arr[i + 1];
        break;
      case item === '--no-include-header':
      case item === '--no-header':
        prev.includeHeader = false;
        break;
    }
    return prev;
  },
  {
    inputPath: process.env.HC_IRIS_INPUT_PATH || path.dirname(__dirname),
    outputPath: process.env.HC_IRIS_OUTPUT_PATH || path.dirname(__dirname),
    includeHeader: true
  }
);
const filter = require('../lib/filter.js')(path.resolve(options.inputPath), path.resolve(options.outputPath), options.includeHeader);

const compiler = postcss().use(varibilify())
const compile = function(src) {
  return compiler.process(src).then(
    function(result) {
      return result.css;
    }
  );
};
const icons = fs.readdirSync(options.inputPath + '/svg').filter(
  function(item) {
    return item.indexOf('.css') === -1;
  }
);
console.log(`Writing SVG icons to inline CSS properties:`);
const inlineIcons = icons.map(
  function(item) {
    const svg = fs.readFileSync(options.inputPath + '/svg/' + item).toString();
    return `--${item.replace('.', '-').replace(' ', '-')}: url('data:image/svg+xml;charset=UTF-8,${svg.trim().replace(/#/g, "%23").replace('currentColor', '%23000')}');`;
  }
).reduce(
  function(prev, item) {
    return `${prev}
${item}`;
  }
);
fs.writeFileSync(options.inputPath + '/icons/base-variables.css', `:root {
  ${inlineIcons}
}`);

console.log(`Writing inline icons to icon %with- placeholders:`);
const placeholderIcons = icons.map(
  function(item) {
    const property = item.replace('.', '-').replace(' ', '-');
    return `%with-${property.replace('svg', 'icon')} {
      @extend %with-icon;
      background-image: var(--${property});
    }
`
  }
).reduce(
  function(prev, item) {
    return `${prev}
${item}`;
  }
);
fs.writeFileSync(options.inputPath + '/icons/icon-placeholders.css', placeholderIcons);



console.log(`Writing CSS custom properties to SASS variables:`);
Promise.all([
  `color/base-variables`,
  `color/semantic-variables`,
  `color/frame-placeholders`,
  `decoration/base-variables`,
  `decoration/base-placeholders`,
  `typography/base-variables`,
  `typography/semantic-variables`,
  `icons/base-variables`,
  `icons/base-placeholders`,
  `icons/icon-placeholders`,
  `reset/base-variables`,
  `reset/minireset`,
  `reset/system`
].map(
  filter(
    function(input) {
      return compile(input);
    }
  )
)).then(
  function() {
    console.log(`Writing CSS @imports to SASS @imports:`);
    return [
      `animation/index`,
      `color/index`,
      `decoration/index`,
      `typography/index`,
      `icons/index`,
      `reset/index`,
      `index`
    ].map(
      filter(
        function(input) {
          return input.replace(/\.css/g, '');
        }
      )
    );

  }
);
