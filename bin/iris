#!/usr/bin/env node
const path = require('path');
const postcss = require('postcss');
const promisify = require('util.promisify');
const fs = require('fs');
const glob = promisify(require('glob'));
const varibilify = require('../lib/varibilify.js');

const options = process.argv.reduce(
  function(prev, item, i, arr) {
    switch(true) {
      case item === '--input-path':
      case item === '-i':
        prev.inputPath = arr[i + 1];
        break;
      case item === '--output-path':
      case item === '-o':
        prev.outputPath = arr[i + 1];
        break;
      case item === '--no-include-header':
      case item === '--no-header':
        prev.includeHeader = false;
        break;
    }
    return prev;
  },
  {
    inputPath: process.env.HC_IRIS_INPUT_PATH || path.dirname(__dirname),
    outputPath: process.env.HC_IRIS_OUTPUT_PATH || path.dirname(__dirname),
    includeHeader: true
  }
);
const filter = require('../lib/filter.js')(path.resolve(options.inputPath), path.resolve(options.outputPath), options.includeHeader);

const compiler = postcss().use(varibilify())
const compile = function(src) {
  return compiler.process(src).then(
    function(result) {
      return result.css.replace(/\.css/g, '');
    }
  );
};

const STRUCTURE_ICONS = '/node_modules/@hashicorp/structure-icons/dist';
const FLIGHT_ICONS = '/node_modules/@hashicorp/ember-flight-icons/public/icons';
const IRIS_ICONS = '/svg';
console.log(`Writing SVG icons to inline CSS properties:`);
const icons = function(path) {
  return fs.readdirSync(`${options.inputPath}${path}`).filter(
    function(item) {
      return item.indexOf('.svg') !== -1;
    }
  ).reduce(
    function(prev, item) {
      prev[item] = fs.readFileSync(`${options.inputPath}${path}/${item}`).toString();
      return prev;
    },
    {}
  )
}
const items = {
  ...icons(FLIGHT_ICONS),
  ...icons(STRUCTURE_ICONS),
  ...icons(IRIS_ICONS)
};
const mappings = JSON.parse(fs.readFileSync(options.inputPath + '/node_modules/@hashicorp/ember-flight-icons/structure-mappings.json'));
const inlineIcons = Object.keys(items).sort().reduce(
  function(prev, item) {
    // console.log(`"${key}",`);
    const key = item.replace('.svg', '');
    const name = item.replace('.', '-').replace(' ', '-');
    if((mappings[key] || '').length > 0) {
      prev.push(`
%${name}-prop {
  @extend %${mappings[key]}-24-svg-prop !optional;
}
`);
    } else {
      prev.push(`
%${name}-prop {
  --${name}: url('data:image/svg+xml;charset=UTF-8,${
      items[item].trim()
        .replace(/#/g, "%23")
        .replace('currentColor', '%23000')
        .replace('width="24" height="24"', 'viewBox="0 0 24 24"')
      }');
}
`);

    }

    return prev;
  },
  []
).reduce(
  function(prev, item) {
    return `${prev}
${item}`;
  }
);

fs.writeFileSync(options.inputPath + '/icons/base-variables.css', inlineIcons);
fs.writeFileSync(options.inputPath + '/icons/index.txt', `[
'${Object.keys(items).sort().join("',\n'")}'
]`);

console.log(`Writing inline icons to icon %with- placeholders:`);
const placeholderIcons = Object.keys(items).sort().map(
  function(item) {
    const key = item.replace('.svg', '');
    const property = item.replace('.', '-').replace(' ', '-');
    let ext = property;
    if((mappings[key] || '').length > 0) {
      ext = `${mappings[key]}-24-svg`;
    }
    return `%with-${property.replace('svg', 'icon')} {
      @extend %with-icon, %${ext}-prop !optional;
      background-image: var(--${ext});
    }
    %with-${property.replace('svg', 'mask')} {
      @extend %with-mask, %${ext}-prop !optional;
      -webkit-mask-image: var(--${ext});
      mask-image: var(--${ext});
    }
`
  }
).reduce(
  function(prev, item) {
    return `${prev}
${item}`;
  }
);
fs.writeFileSync(options.inputPath + '/icons/icon-placeholders.css', placeholderIcons);


console.log(`Writing CSS custom properties to SASS variables:`);
console.log(`Writing CSS @imports to SASS @imports:`);
glob(`${options.inputPath}/${'**'}/${'*'}.css`,
  {
    ignore: [
      `${options.inputPath}/node_modules/${'**'}`,
      `${options.inputPath}/test/${'**'}`,
      `${options.inputPath}/svg/${'**'}`
    ]
  }
).then(
  function(files) {
    return files.map(
      function(str) {
        return str.replace(`${options.inputPath}/`, '')
          .replace('.css', '');
      }
    )
  }
).then(
  function(files) {
    Promise.all(files.map(
      filter(
        function(input) {
          return compile(input);
        }
      )
    ));
  }
);
